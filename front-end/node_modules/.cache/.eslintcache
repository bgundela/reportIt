[{"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/index.js":"1","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/reportWebVitals.js":"2","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/App.js":"3","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/components/Header.js":"4","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/LoginPage.js":"5","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/ViewPostsPage.js":"6","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/ReportingPage.js":"7","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/Layout.js":"8","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/RegisterPage.js":"9","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/components/Post.js":"10","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/context/UserContext.js":"11","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/context/CityContext.js":"12"},{"size":606,"mtime":1693015259503,"results":"13","hashOfConfig":"14"},{"size":362,"mtime":1693013638062,"results":"15","hashOfConfig":"14"},{"size":984,"mtime":1693883349450,"results":"16","hashOfConfig":"14"},{"size":2868,"mtime":1696112972403,"results":"17","hashOfConfig":"14"},{"size":3528,"mtime":1693934330923,"results":"18","hashOfConfig":"14"},{"size":2882,"mtime":1696112957423,"results":"19","hashOfConfig":"14"},{"size":4257,"mtime":1694472850298,"results":"20","hashOfConfig":"14"},{"size":724,"mtime":1693192150051,"results":"21","hashOfConfig":"14"},{"size":4607,"mtime":1693934130899,"results":"22","hashOfConfig":"14"},{"size":1160,"mtime":1696112939093,"results":"23","hashOfConfig":"14"},{"size":386,"mtime":1693933025349,"results":"24","hashOfConfig":"14"},{"size":366,"mtime":1693933153906,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"xzvwv",{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"29"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"29"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"29"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/index.js",[],[],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/reportWebVitals.js",[],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/App.js",["67"],[],"import { Routes, Route } from 'react-router-dom';\nimport './App.css';\nimport Header from './components/Header';\nimport ReportingPage from './pages/ReportingPage';\nimport Layout from './pages/Layout';\nimport LoginPage from './pages/LoginPage';\nimport RegisterPage from './pages/RegisterPage';\nimport ViewPostsPage from './pages/ViewPostsPage';\nimport { UserContextProvider } from './context/UserContext';\nimport { CityContextProvider } from './context/CityContext';\n\nfunction App() {\n  return (\n    <CityContextProvider>\n      <UserContextProvider>\n        <Routes>\n          <Route path='/' element={<Layout />}>\n            <Route index element={<ReportingPage />} />\n            <Route path='/login' element={<LoginPage />} />\n            <Route path='/register' element={<RegisterPage />} />\n            <Route path='/viewPosts' element={<ViewPostsPage />} />\n          </Route>\n        </Routes>\n      </UserContextProvider>\n    </CityContextProvider>\n  );\n}\n\nexport default App;\n","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/components/Header.js",["68","69","70","71"],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/LoginPage.js",["72","73"],[],"import React from 'react'\nimport { useState, useContext } from 'react'\nimport { Link, Navigate } from 'react-router-dom'\nimport { UserContext } from '../context/UserContext'\nimport { CityContext } from '../context/CityContext'\n\nconst LoginPage = () => {\n    const [name, setName] = useState('')\n    const [password, setPassword] = useState('')\n    const [redirect, setRedirect] = useState(false)\n    const { Username, setUsername } = useContext(UserContext);\n    const { City, setCity } = useContext(CityContext)\n\n    const login = async (e) => {\n        e.preventDefault()\n\n        if (name !== '' || password !== '') {\n            const response = await fetch('http://localhost:4000/auth/login', {\n                method: 'POST',\n                body: JSON.stringify({ 'username': name, password }),\n                headers: { 'Content-Type': 'application/json' },\n                credentials: 'include'\n            })\n\n            if (response.ok) {\n                response.json().then(userInfo => {\n                    setUsername(name)\n                    window.sessionStorage.setItem('username', name)\n                    findCity(name)\n                    setRedirect(true)\n                })\n            } else {\n                alert('Login failed. Please try again. If isssue persists, contact support.')\n            }\n\n        } else {\n            alert('All fields are required.')\n        }\n    }\n\n    const findCity = async (username) => {\n        const response = await fetch('http://localhost:4000/users/city', {\n            method: 'POST',\n            body: JSON.stringify({ username }),\n            headers: { 'Content-Type': 'application/json' },\n            credentials: 'include'\n        })\n\n        if (response.ok) {\n            response.json().then(city => {\n                setCity(city)\n                window.sessionStorage.setItem('city', city)\n            })\n        } else {\n            alert('Login failed. Please try again. If isssue persists, contact support.')\n        }\n    }\n\n    if (redirect || Username !== '' && City !== '') {\n        return (\n            <Navigate to='/viewPosts' />\n        )\n    }\n\n    return (\n        <form onSubmit={(e) => login(e)}>\n            <h1 className='white bold-font login'>Login</h1>\n\n            <div className='login-form'>\n                <div className='username username-text'>\n                    <h3 className='white light-font small-size'>Enter your <span className='green'>username...</span></h3>\n                </div>\n                <div className='username'>\n                    <input className='cred-box' value={name} onChange={(e) => setName(e.target.value)}></input>\n                </div>\n\n\n                <div className='password password-text'>\n                    <h3 className='white light-font small-size'>Enter your <span className='green'>password...</span></h3>\n                </div>\n                <div className='password'>\n                    <input className='cred-box' type='password' value={password} onChange={(e) => setPassword(e.target.value)}></input>\n                </div>\n\n                <Link to='/register' className='register-link'>\n                    <h3 className='white light-font small-size'>Don't have an account? <span className='green'>Register here!</span></h3>\n                </Link>\n\n                <div id='btn-padding'>\n                    <button className='btn bold-font' type='submit'>Go!</button>\n                </div>\n            </div>\n\n        </form>\n    )\n}\n\nexport default LoginPage","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/ViewPostsPage.js",["74","75","76","77","78"],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/ReportingPage.js",["79","80","81","82","83"],[],"import React, { useState, useContext } from 'react'\nimport { UserContext } from '../context/UserContext'\nimport { Navigate } from 'react-router-dom'\n\n\n\nconst ReportingPage = () => {\n    const [city, setCity] = useState('Shakopee')\n    const [title, setTitle] = useState('')\n    const [explanation, setExplanation] = useState('')\n    const [email, setEmail] = useState('')\n    const [picture, setPicture] = useState('')\n\n    const submitReport = async (e) => {\n        e.preventDefault();\n        if (city !== '' && title !== '' && explanation !== '' && email !== '') {\n            console.log(picture)\n            if (picture !== null) {\n                const base64Picture = await convertToBase64(picture)\n                console.log(base64Picture)\n                const response = await fetch('http://localhost:4000/reports/create', {\n                    method: 'POST',\n                    body: JSON.stringify({ city, title, explanation, email, 'picture': base64Picture }),\n                    headers: { 'Content-Type': 'application/json' },\n                    credentials: 'include'\n                })\n\n                setCity('Shakopee')\n                setTitle('')\n                setExplanation('')\n                setEmail('')\n                setPicture(null)\n            } else {\n                const response = await fetch('http://localhost:4000/reports/create', {\n                    method: 'POST',\n                    body: JSON.stringify({ city, title, explanation, email }),\n                    headers: { 'Content-Type': 'application/json' },\n                    credentials: 'include'\n                })\n\n                setCity('Shakopee')\n                setTitle('')\n                setExplanation('')\n                setEmail('')\n                setPicture(null)\n            }\n\n        } else {\n            alert('All fields except picture are required.')\n        }\n\n    }\n\n\n    return (\n        <form className='reporting-page' onSubmit={(e) => submitReport(e)}>\n            <h2 className='white semibold-font reporting-header'>Report an Issue:</h2>\n\n            <div className='select-city'>\n                <h3 className='dropdown-text white light-font small-size'>What city are <span className='green'>you in?</span></h3>\n            </div>\n\n            <select className='dropdown bold-font' value={city} onChange={(e) => setCity(e.target.value)}>\n                <option value='Shakopee'>Shakopee</option>\n            </select>\n\n            <div className='problem-title '>\n                <h3 className='title white light-font small-size'>What problem have you <span className='green'>found?</span></h3>\n            </div>\n\n            <input className='text-box' value={title} onChange={(e) => setTitle(e.target.value)}></input>\n\n            <div className='problem-explanation'>\n                <h3 className='white light-font small-size'>Tell us a little <span className='green'>more...</span></h3>\n            </div>\n\n            <textarea className='text-area' value={explanation} onChange={(e) => setExplanation(e.target.value)}></textarea>\n\n            <div className='report-email'>\n                <h3 className='white light-font small-size'>Tell us your <span className='green space'>email...</span></h3>\n            </div>\n\n            <input className='text-box' value={email} onChange={(e) => setEmail(e.target.value)}></input>\n\n            <div className='picture'>\n                <h3 className='picture white light-font small-size'>Show us a <span className='green space'>picture...</span></h3>\n            </div>\n\n            <input className='picture-select reporting-line' type='file' onChange={(e) => setPicture(e.target.files[0])}></input>\n\n            <div id='btn-padding'>\n                <button className='btn bold-font' type='submit'>Submit</button>\n            </div>\n        </form>\n    )\n}\n\n\nexport default ReportingPage\n\nconst convertToBase64 = (file) => {\n    if (!file) {\n        return\n    }\n    return new Promise((resolve, reject) => {\n        const fileReader = new FileReader()\n        fileReader.readAsDataURL(file)\n        fileReader.onload = () => {\n            resolve(fileReader.result)\n        }\n\n        fileReader.onerror = (err) => {\n            reject(err)\n        }\n    })\n}\n","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/Layout.js",[],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/pages/RegisterPage.js",["84","85"],[],"import React from 'react'\nimport { Link, Navigate } from 'react-router-dom'\nimport { useState, useContext } from 'react'\nimport { UserContext } from '../context/UserContext'\nimport { CityContext } from '../context/CityContext'\n\nconst RegisterPage = () => {\n    const [city, setRegisterCity] = useState('')\n    const [name, setName] = useState('')\n    const [password, setPassword] = useState('')\n    const [repassword, setRepassword] = useState('')\n    const [redirect, setRedirect] = useState(false)\n    const { Username, setUsername } = useContext(UserContext);\n    const { City, setCity } = useContext(CityContext)\n\n    const register = async (e) => {\n        e.preventDefault()\n\n\n        if (name !== '' && password !== '' && repassword !== '' && city !== '') {\n            if (password === repassword) {\n                if (city === '000001') {\n                    const response = await fetch('http://localhost:4000/users/register', {\n                        method: 'POST',\n                        body: JSON.stringify({ 'username': name, password, city: 'Shakopee' }),\n                        headers: { 'Content-Type': 'application/json' },\n                        credentials: 'include'\n                    })\n\n                    if (response.ok) {\n                        response.json().then(userInfo => {\n                            setUsername(name)\n                            window.sessionStorage.setItem('username', name)\n                            if (city === '000001') {\n                                setCity('Shakopee')\n                                window.sessionStorage.setItem('city', 'Shakopee')\n                            }\n                            setRedirect(true)\n\n                        })\n                    } else {\n                        alert('Registration failed. You may already have an account. Please try again. If isssue persists, contact support.')\n                    }\n                } else {\n                    alert('You are not authorized to create an account')\n                    setCity('')\n                }\n            } else {\n                alert('Passwords must match')\n                setRepassword('')\n            }\n        } else {\n            alert('All fields are required.')\n        }\n\n\n    }\n\n    if (redirect) {\n        return (\n            <Navigate to='/viewPosts' />\n        )\n    }\n    return (\n        <form onSubmit={(e) => register(e)}>\n            <h1 className='white bold-font register'>Register</h1>\n\n            <div className='register-form'>\n\n                <div className='username username-register-text'>\n                    <h3 className='white light-font small-size'>Enter your six digit city <span className='green'>code...</span></h3>\n                </div>\n                <div className='city city-register-text'>\n                    <input className='city-box' value={city} onChange={(e) => setRegisterCity(e.target.value)}></input>\n                </div>\n\n                <div className='username username-register-text'>\n                    <h3 className='white light-font small-size'>Enter your <span className='green'>username...</span></h3>\n                </div>\n                <div className='username'>\n                    <input className='cred-box' value={name} onChange={(e) => setName(e.target.value)}></input>\n                </div>\n\n\n                <div className='password password-register-text'>\n                    <h3 className='white light-font small-size'>Enter your <span className='green'>password...</span></h3>\n                </div>\n                <div className='password'>\n                    <input className='cred-box' type='password' value={password} onChange={(e) => setPassword(e.target.value)}></input>\n                </div>\n\n                <div className='password password-register-text'>\n                    <h3 className='white light-font small-size'>Re-enter your <span className='green'>password...</span></h3>\n                </div>\n                <div className='password'>\n                    <input className='cred-box' type='password' value={repassword} onChange={(e) => setRepassword(e.target.value)}></input>\n                </div>\n\n                <Link to='/login' className='login-link'>\n                    <h3 className='white light-font small-size'>Already have an account? <span className='green'>Login here!</span></h3>\n                </Link>\n\n                <div>\n                    <button className='btn bold-font' type='submit'>Go!</button>\n                </div>\n            </div>\n\n        </form>\n    )\n}\n\nexport default RegisterPage","/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/components/Post.js",["86","87","88"],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/context/UserContext.js",[],[],"/Users/bhuvan/Desktop/Bhuvan/Programming/reportIt/front-end/reportit/src/context/CityContext.js",[],[],{"ruleId":"89","severity":1,"message":"90","line":3,"column":8,"nodeType":"91","messageId":"92","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"93","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"89","severity":1,"message":"94","line":2,"column":16,"nodeType":"91","messageId":"92","endLine":2,"endColumn":24},{"ruleId":"89","severity":1,"message":"95","line":10,"column":13,"nodeType":"91","messageId":"92","endLine":10,"endColumn":21},{"ruleId":"89","severity":1,"message":"96","line":11,"column":13,"nodeType":"91","messageId":"92","endLine":11,"endColumn":17},{"ruleId":"97","severity":1,"message":"98","line":59,"column":18,"nodeType":"99","messageId":"100","endLine":59,"endColumn":20},{"ruleId":"97","severity":1,"message":"98","line":59,"column":37,"nodeType":"99","messageId":"100","endLine":59,"endColumn":39},{"ruleId":"89","severity":1,"message":"101","line":11,"column":12,"nodeType":"91","messageId":"92","endLine":11,"endColumn":23},{"ruleId":"89","severity":1,"message":"102","line":12,"column":23,"nodeType":"91","messageId":"92","endLine":12,"endColumn":34},{"ruleId":"89","severity":1,"message":"103","line":13,"column":19,"nodeType":"91","messageId":"92","endLine":13,"endColumn":26},{"ruleId":"104","severity":1,"message":"105","line":39,"column":8,"nodeType":"106","endLine":39,"endColumn":17,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":46,"column":8,"nodeType":"106","endLine":46,"endColumn":16,"suggestions":"109"},{"ruleId":"89","severity":1,"message":"110","line":1,"column":27,"nodeType":"91","messageId":"92","endLine":1,"endColumn":37},{"ruleId":"89","severity":1,"message":"111","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":21},{"ruleId":"89","severity":1,"message":"94","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":18},{"ruleId":"89","severity":1,"message":"112","line":21,"column":23,"nodeType":"91","messageId":"92","endLine":21,"endColumn":31},{"ruleId":"89","severity":1,"message":"112","line":34,"column":23,"nodeType":"91","messageId":"92","endLine":34,"endColumn":31},{"ruleId":"89","severity":1,"message":"95","line":13,"column":13,"nodeType":"91","messageId":"92","endLine":13,"endColumn":21},{"ruleId":"89","severity":1,"message":"96","line":14,"column":13,"nodeType":"91","messageId":"92","endLine":14,"endColumn":17},{"ruleId":"89","severity":1,"message":"113","line":1,"column":10,"nodeType":"91","messageId":"92","endLine":1,"endColumn":17},{"ruleId":"89","severity":1,"message":"114","line":2,"column":17,"nodeType":"91","messageId":"92","endLine":2,"endColumn":26},{"ruleId":"115","severity":1,"message":"116","line":10,"column":21,"nodeType":"117","endLine":10,"endColumn":64},"no-unused-vars","'Header' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Navigate' is defined but never used.","'Username' is assigned a value but never used.","'City' is assigned a value but never used.","no-mixed-operators","Unexpected mix of '||' and '&&'. Use parentheses to clarify the intended order of operations.","LogicalExpression","unexpectedMixedOperator","'searchPosts' is assigned a value but never used.","'setUsername' is assigned a value but never used.","'setCity' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getReports'. Either include it or remove the dependency array.","ArrayExpression",["118"],"React Hook useEffect has missing dependencies: 'getReports' and 'posts'. Either include them or remove the dependency array. You can also do a functional update 'setPosts(p => ...)' if you only need 'posts' in the 'setPosts' call.",["119"],"'useContext' is defined but never used.","'UserContext' is defined but never used.","'response' is assigned a value but never used.","'Divider' is defined but never used.","'useEffect' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",{"desc":"120","fix":"121"},{"desc":"122","fix":"123"},"Update the dependencies array to be: [getReports, loading]",{"range":"124","text":"125"},"Update the dependencies array to be: [getReports, posts, search]",{"range":"126","text":"127"},[1399,1408],"[getReports, loading]",[1574,1582],"[getReports, posts, search]"]